#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import logging
import datetime
import openpyxl
from openpyxl.styles import numbers
from openpyxl.drawing.image import Image as XLImage
from io import BytesIO
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
from dotenv import load_dotenv
from PIL import Image as PILImage
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
import json
import asyncio
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv(override=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä—Ç–∞ –¥–ª—è Railway
PORT = int(os.getenv('PORT', 8080))

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_TOKEN")
logger.info(f"TELEGRAM_TOKEN: {'pr√©sent' if TOKEN else 'absent'}")
if not TOKEN:
    logger.error("‚ùå –û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω")
    logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google
GOOGLE_SHEETS_SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
GOOGLE_DRIVE_SCOPES = ['https://www.googleapis.com/auth/drive']
SPREADSHEET_ID = os.getenv("GOOGLE_SHEET_ID")
GOOGLE_DRIVE_FOLDER_ID = os.getenv("GOOGLE_DRIVE_FOLDER_ID")
logger.info(f"GOOGLE_SHEET_ID: {'pr√©sent' if SPREADSHEET_ID else 'absent'}")
logger.info(f"GOOGLE_DRIVE_FOLDER_ID: {'pr√©sent' if GOOGLE_DRIVE_FOLDER_ID else 'absent'}")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Google –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
GOOGLE_CREDS_JSON = os.getenv("GOOGLE_CREDS_JSON")
logger.info(f"GOOGLE_CREDS_JSON: {'pr√©sent' if GOOGLE_CREDS_JSON else 'absent'}")
if not GOOGLE_CREDS_JSON:
    logger.error("‚ùå –û–®–ò–ë–ö–ê: –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Google –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway")
    sys.exit(1)

try:
    creds_dict = json.loads(GOOGLE_CREDS_JSON)
    creds = service_account.Credentials.from_service_account_info(
        creds_dict,
        scopes=GOOGLE_SHEETS_SCOPES + GOOGLE_DRIVE_SCOPES
    )
except Exception as e:
    logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Google: {e}")
    sys.exit(1)

if not SPREADSHEET_ID or not GOOGLE_DRIVE_FOLDER_ID:
    logger.error("‚ùå –û–®–ò–ë–ö–ê: ID —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ –ø–∞–ø–∫–∏ Drive –Ω–µ —É–∫–∞–∑–∞–Ω—ã")
    sys.exit(1)

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
PHOTOS_DIR = "photos"
EXCEL_FILE = os.getenv("EXCEL_FILE", "–∂—É—Ä–Ω–∞–ª_–≤—ã–ø–µ—á–∫–∏.xlsx")
MAX_IMAGE_WIDTH = 800
MAX_IMAGE_HEIGHT = 600

# –°–ø–∏—Å–æ–∫ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ (–ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è)
PRODUCT_NAMES = [
    "–ö—Ä—É–∞—Å—Å–∞–Ω —Å –≤–µ—Ç—á–∏–Ω–æ–π –∏ —Å—ã—Ä–æ–º",
    "–ö—Ä—É–∞—Å—Å–∞–Ω –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π",
    "–ú–∏–Ω–∏–∫—Ä—É–∞—Å—Å–∞–Ω",
    "–ö—Ä—É–∞—Å—Å–∞–Ω —Å —à–æ–∫–æ–ª–∞–¥–Ω–æ–π –Ω–∞—á–∏–Ω–∫–æ–π",
    "–ö—Ä—É–∞—Å—Å–∞–Ω —Å —Å–æ–ª–µ–Ω–æ–π –∫–∞—Ä–∞–º–µ–ª—å—é",
    "–°–ª–æ–π–∫–∞ —Å —Å–æ–ª–µ–Ω–æ–π –∫–∞—Ä–∞–º–µ–ª—å—é",
    "–°–ª–æ–π–∫–∞ –¥—Ä–æ–∂–∂–µ–≤–∞—è —Å –Ω–∞—á–∏–Ω–∫–æ–π ¬´–ú–∞–ª–∏–Ω–æ–≤–∞—è¬ª",
    "–°–ª–æ–π–∫–∞ –¥—Ä–æ–∂–∂–µ–≤–∞—è —Å –Ω–∞—á–∏–Ω–∫–æ–π ¬´–ú–∞–∫–æ–≤–∞—è¬ª",
    "–°–ª–æ–π–∫–∞ —Å —Å—ã—Ä–æ–º –∏ —à–ø–∏–Ω–∞—Ç–æ–º",
    "–°–æ—Å–∏—Å–∫–∞ –≤ —Ç–µ—Å—Ç–µ"
]

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ñ–æ—Ç–æ
os.makedirs(PHOTOS_DIR, exist_ok=True)

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
COLUMN_HEADERS = [
    '–ú–∞—Å—Ç–µ—Ä',
    '–î–∞—Ç–∞',
    '–°–º–µ–Ω–∞',
    '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ',
    '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
    '–§–æ—Ç–æ'
]

def init_google_services():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ Google"""
    try:
        sheets_service = build('sheets', 'v4', credentials=creds)
        drive_service = build('drive', 'v3', credentials=creds)
        return sheets_service, drive_service
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê Google: {e}")
        return None, None

def init_excel_file():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ Excel"""
    if not os.path.exists(EXCEL_FILE):
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "–ñ—É—Ä–Ω–∞–ª –≤—ã–ø–µ—á–∫–∏"
        ws.append(COLUMN_HEADERS)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        column_widths = [20, 15, 10, 20, 30, 20]
        for i, width in enumerate(column_widths, start=1):
            ws.column_dimensions[openpyxl.utils.get_column_letter(i)].width = width
            
        wb.save(EXCEL_FILE)

def save_to_excel(data, photo_path):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Excel"""
    try:
        wb = openpyxl.load_workbook(EXCEL_FILE)
        ws = wb.active

        row_num = ws.max_row + 1
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        ws.cell(row=row_num, column=1, value=data['–ú–∞—Å—Ç–µ—Ä'])
        ws.cell(row=row_num, column=2, value=data['date_obj']).number_format = 'DD.MM.YYYY'
        ws.cell(row=row_num, column=3, value=data['—Å–º–µ–Ω–∞'])
        ws.cell(row=row_num, column=4, value=data['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'])
        ws.cell(row=row_num, column=5, value=data.get('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', ''))
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        img = XLImage(photo_path)
        img.width = 150
        img.height = 100
        img.anchor = f'F{row_num}'
        ws.add_image(img)
        
        ws.row_dimensions[row_num].height = 80
        wb.save(EXCEL_FILE)
        return True
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê Excel: {e}")
        return False

async def upload_to_drive(file_path, drive_service):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ Google Drive"""
    try:
        file_metadata = {
            'name': os.path.basename(file_path),
            'parents': [GOOGLE_DRIVE_FOLDER_ID]
        }
        media = MediaFileUpload(file_path, mimetype='image/jpeg')
        file = drive_service.files().create(
            body=file_metadata,
            media_body=media,
            fields='id'
        ).execute()
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø
        drive_service.permissions().create(
            fileId=file['id'],
            body={'type': 'anyone', 'role': 'reader'}
        ).execute()
        
        return f"https://drive.google.com/uc?id={file['id']}"
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê Drive: {e}")
        return None

async def save_to_sheets(sheets_service, data, image_url):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google Sheets"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        result = sheets_service.spreadsheets().values().get(
            spreadsheetId=SPREADSHEET_ID,
            range="A1:F1"
        ).execute()
        
        if 'values' not in result:
            sheets_service.spreadsheets().values().update(
                spreadsheetId=SPREADSHEET_ID,
                range="A1:F1",
                valueInputOption='USER_ENTERED',
                body={'values': [COLUMN_HEADERS]}
            ).execute()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
        date_str = data['date_obj'].strftime("%d.%m.%Y")
        
        values = [
            [
                data['–ú–∞—Å—Ç–µ—Ä'],
                date_str,
                data['—Å–º–µ–Ω–∞'],
                data['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'],
                data.get('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', ''),
                f'=IMAGE("{image_url}")'
            ]
        ]

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        sheets_service.spreadsheets().values().append(
            spreadsheetId=SPREADSHEET_ID,
            range="A1:F1",
            valueInputOption='USER_ENTERED',
            insertDataOption='INSERT_ROWS',
            body={'values': values}
        ).execute()
        
        return True
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê Sheets: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    context.user_data.clear()
    context.user_data['—ç—Ç–∞–ø'] = 1
    await update.message.reply_text(
        "üë®‚Äçüç≥ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ú–∞—Å—Ç–µ—Ä–∞:",
        reply_markup=ReplyKeyboardRemove()
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_data = context.user_data
    text = update.message.text.strip()

    if user_data['—ç—Ç–∞–ø'] == 1:
        user_data['–ú–∞—Å—Ç–µ—Ä'] = text
        user_data['—ç—Ç–∞–ø'] = 2
        
        # Nouvelle interface pour la date avec boutons
        keyboard = [
            [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data='date_today')],
            [InlineKeyboardButton("–î—Ä—É–≥–∞—è –¥–∞—Ç–∞", callback_data='date_custom')]
        ]
        
        await update.message.reply_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif user_data['—ç—Ç–∞–ø'] == 2:
        # Traitement si l'utilisateur entre une date manuellement
        if 'custom_date' in user_data and user_data['custom_date']:
            try:
                date_obj = datetime.datetime.strptime(text, "%d.%m.%Y")
                user_data['–¥–∞—Ç–∞'] = text
                user_data['date_obj'] = date_obj
                del user_data['custom_date']
                user_data['—ç—Ç–∞–ø'] = 3
                
                await update.message.reply_text(
                    "üåûüåú –í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É:",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("–î–µ–Ω—å", callback_data='–¥–µ–Ω—å'),
                         InlineKeyboardButton("–ù–æ—á—å", callback_data='–Ω–æ—á—å')]
                    ])
                )
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
                return
    
    elif user_data['—ç—Ç–∞–ø'] == 4:
        if 'custom_name' in user_data and user_data['custom_name']:
            user_data['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'] = text
            del user_data['custom_name']
            user_data['—ç—Ç–∞–ø'] = 5
            await update.message.reply_text("üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    
    elif user_data['—ç—Ç–∞–ø'] == 5:
        user_data['–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'] = text
        user_data['—ç—Ç–∞–ø'] = 6
        await update.message.reply_text("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏:")

async def handle_date_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()

    user_data = context.user_data
    
    if query.data == 'date_today':
        today = datetime.datetime.now()
        user_data['–¥–∞—Ç–∞'] = today.strftime("%d.%m.%Y")
        user_data['date_obj'] = today
        user_data['—ç—Ç–∞–ø'] = 3
        
        await query.edit_message_text(text=f"–î–∞—Ç–∞: {user_data['–¥–∞—Ç–∞']}")
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="üåûüåú –í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–î–µ–Ω—å", callback_data='–¥–µ–Ω—å'),
                 InlineKeyboardButton("–ù–æ—á—å", callback_data='–Ω–æ—á—å')]
            ])
        )
    elif query.data == 'date_custom':
        user_data['custom_date'] = True
        await query.edit_message_text(text="‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    elif user_data['—ç—Ç–∞–ø'] == 2:
        if text.lower() == '—Å–µ–≥–æ–¥–Ω—è':
            today = datetime.datetime.now()
            user_data['–¥–∞—Ç–∞'] = today.strftime("%d.%m.%Y")
            user_data['date_obj'] = today
        else:
            try:
                date_obj = datetime.datetime.strptime(text, "%d.%m.%Y")
                user_data['–¥–∞—Ç–∞'] = text
                user_data['date_obj'] = date_obj
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
                return

        user_data['—ç—Ç–∞–ø'] = 3
        await update.message.reply_text(
            "üåûüåú –í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–î–µ–Ω—å", callback_data='–¥–µ–Ω—å'),
                 InlineKeyboardButton("–ù–æ—á—å", callback_data='–Ω–æ—á—å')]
            ])
        )
    
    elif user_data['—ç—Ç–∞–ø'] == 4:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        if 'custom_name' in user_data and user_data['custom_name']:
            user_data['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'] = text
            del user_data['custom_name']
            user_data['—ç—Ç–∞–ø'] = 5
            await update.message.reply_text("üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    
    elif user_data['—ç—Ç–∞–ø'] == 5:
        user_data['–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'] = text
        user_data['—ç—Ç–∞–ø'] = 6
        await update.message.reply_text("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏:")

async def handle_shift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–º–µ–Ω—ã"""
    query = update.callback_query
    await query.answer()

    user_data = context.user_data
    user_data['—Å–º–µ–Ω–∞'] = '–î–µ–Ω—å' if query.data == '–¥–µ–Ω—å' else '–ù–æ—á—å'
    user_data['—ç—Ç–∞–ø'] = 4

    await query.edit_message_text(text=f"–°–º–µ–Ω–∞: {user_data['—Å–º–µ–Ω–∞']}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ–¥–Ω–∏–º –ø—Ä–æ–¥—É–∫—Ç–æ–º –Ω–∞ —Å—Ç—Ä–æ–∫—É
    keyboard = []
    for idx, name in enumerate(PRODUCT_NAMES):
        keyboard.append([InlineKeyboardButton(name, callback_data=f"name_{idx}")])
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ —Å–≤–æ–µ–≥–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
    keyboard.append([InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", callback_data="custom_name")])
    
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text="üè∑ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_product_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    user_data = context.user_data
    
    if query.data == "custom_name":
        user_data['custom_name'] = True
        await query.edit_message_text(text="‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:")
        return
    
    idx = int(query.data.split("_")[1])
    user_data['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'] = PRODUCT_NAMES[idx]
    user_data['—ç—Ç–∞–ø'] = 5
    
    await query.edit_message_text(text=f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {user_data['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}")
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text="üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:"
    )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ"""
    user_data = context.user_data
    if user_data.get('—ç—Ç–∞–ø') != 6:
        await update.message.reply_text("‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    try:
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ
        photo_file = await update.message.photo[-1].get_file()
        img_data = BytesIO()
        await photo_file.download_to_memory(out=img_data)
        img_data.seek(0)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        with PILImage.open(img_data) as img:
            img.thumbnail((MAX_IMAGE_WIDTH, MAX_IMAGE_HEIGHT))
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            photo_path = os.path.join(PHOTOS_DIR, f"{timestamp}.jpg")
            img.save(photo_path, "JPEG", quality=85)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        excel_ok = save_to_excel(user_data, photo_path)
        sheets_ok = False
        image_url = None
        
        sheets_service, drive_service = init_google_services()
        if sheets_service and drive_service:
            image_url = await upload_to_drive(photo_path, drive_service)
            if image_url:
                sheets_ok = await save_to_sheets(sheets_service, user_data, image_url)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        if excel_ok and sheets_ok:
            msg = (
                "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
                f"üìÖ –î–∞—Ç–∞: {user_data['–¥–∞—Ç–∞']}\n"
                f"üë®‚Äçüç≥ –ú–∞—Å—Ç–µ—Ä: {user_data['–ú–∞—Å—Ç–µ—Ä']}\n"
                f"üåÉ –°–º–µ–Ω–∞: {user_data['—Å–º–µ–Ω–∞']}\n"
                f"üè∑ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {user_data['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}\n"
                f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {user_data.get('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '–Ω–µ—Ç')}\n\n"
                "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å?"
            )
        elif excel_ok:
            msg = "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Excel, –Ω–æ –æ—à–∏–±–∫–∞ Google Sheets\n–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å?"
        else:
            msg = "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è\n–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞?"

        await update.message.reply_text(
            msg,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ûï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å", callback_data='–Ω–æ–≤–∞—è')]
            ])
        )

    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n"
            "–ù–∞—á–Ω–∏—Ç–µ —Å /start"
        )

async def handle_new(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å"""
    query = update.callback_query
    await query.answer()
    await start(query, context)

async def health_check(request):
    """Endpoint de v√©rification de sant√© pour Railway"""
    return web.Response(text="OK")

async def main():
    """Fonction principale de d√©marrage du bot"""
    # V√©rification des variables d'environnement
    logger.info("V√©rification des variables d'environnement...")
    if not TOKEN:
        logger.error("‚ùå TELEGRAM_TOKEN manquant")
        return
    if not GOOGLE_CREDS_JSON:
        logger.error("‚ùå GOOGLE_CREDS_JSON manquant")
        return
    if not SPREADSHEET_ID:
        logger.error("‚ùå GOOGLE_SHEET_ID manquant")
        return
    if not GOOGLE_DRIVE_FOLDER_ID:
        logger.error("‚ùå GOOGLE_DRIVE_FOLDER_ID manquant")
        return

    logger.info("‚úÖ Variables d'environnement OK")
    logger.info("Initialisation de l'application...")

    # Initialisation de l'application
    application = Application.builder().token(TOKEN).build()
    
    # Ajout des gestionnaires
    logger.info("Configuration des gestionnaires...")
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("new", handle_new))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(handle_date_choice, pattern="^date_"))
    application.add_handler(CallbackQueryHandler(handle_shift, pattern="^–¥–µ–Ω—å|–Ω–æ—á—å$"))
    application.add_handler(CallbackQueryHandler(handle_product_name, pattern="^name_|custom_name$"))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    
    logger.info("‚úÖ Configuration termin√©e")
    logger.info("D√©marrage du bot...")

    try:
        # Initialisation de l'application
        await application.initialize()
        await application.start()
        
        # D√©marrage du polling
        await application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'ex√©cution du bot: {str(e)}")
    finally:
        # Arr√™t propre de l'application
        try:
            logger.info("Arr√™t de l'application...")
            await application.stop()
            await application.shutdown()
            logger.info("‚úÖ Application arr√™t√©e avec succ√®s")
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'arr√™t du bot: {str(e)}")

def run_bot():
    """Fonction pour ex√©cuter le bot"""
    try:
        # Cr√©ation d'une nouvelle boucle d'√©v√©nements
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            # Ex√©cution de la fonction principale
            loop.run_until_complete(main())
        except KeyboardInterrupt:
            logger.info("Arr√™t manuel du bot")
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'ex√©cution du bot: {str(e)}")
            sys.exit(1)
        finally:
            # Nettoyage de la boucle d'√©v√©nements
            try:
                pending = asyncio.all_tasks(loop)
                loop.run_until_complete(asyncio.gather(*pending, return_exceptions=True))
                loop.run_until_complete(loop.shutdown_asyncgens())
            finally:
                loop.close()
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'ex√©cution du bot: {str(e)}")
        sys.exit(1)

if __name__ == '__main__':
    logger.info("üöÄ D√©marrage du programme...")
    run_bot()
